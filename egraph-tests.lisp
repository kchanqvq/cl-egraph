(uiop:define-package :egraph/tests
    (:use :cl :egraph)
  (:import-from :fiveam #:def-suite* #:def-test #:is))

(in-package :egraph/tests)

(def-suite* :egraph)

(def-test union-find ()
  (let* ((egraph (make-egraph))
         (x (make-enode egraph (list 1)))
         (y (make-enode egraph (list 2))))
    (is (eq (enode-find x) x))
    (is (eq (enode-find y) y))
    (egraph-merge egraph x y)
    (is (eq (enode-find x) (enode-find y)))

    (let ((results (list-enodes x)))
      (is (= 2 (length results)))
      (is (member x results))
      (is (member y results)))

    (let ((results (list-enodes y)))
      (is (= 2 (length results)))
      (is (member x results))
      (is (member y results)))

    (egraph-rebuild egraph)
    (is (eq (enode-find x) (enode-find y)))
    (check-egraph egraph)))

(def-test rebuild ()
  (let* ((egraph (make-egraph))
         (a (make-enode egraph (list 'a)))
         (b (make-enode egraph (list 'b)))
         (f-a (make-enode egraph (list 'f a)))
         (f-b (make-enode egraph (list 'f b)))
         (g-a (make-enode egraph (list 'g a)))
         (g-b (make-enode egraph (list 'g b)))
         (f-f-a (make-enode egraph (list 'f f-a)))
         (f-f-b (make-enode egraph (list 'f f-b))))
    (egraph-merge egraph a b)
    (is (eq (enode-find a) (enode-find b)))
    (do-enodes (node a)
      (is (enode-canonical-p node)))
    (egraph-rebuild egraph)
    (is (eq (enode-find f-a) (enode-find f-b)))
    (is (eq (enode-find f-f-a) (enode-find f-f-b)))
    (is (eq (enode-find g-a) (enode-find g-b)))
    (is (not (eq (enode-find a) (enode-find f-a))))
    (is (not (eq (enode-find f-a) (enode-find g-a))))
    (is (not (eq (enode-find f-a) (enode-find f-f-a))))
    (do-enodes (node a)
      (is (enode-canonical-p node)))
    (do-enodes (node f-a)
      (is (enode-canonical-p node)))
    (do-enodes (node g-a)
      (is (enode-canonical-p node)))
    (do-enodes (node f-f-a)
      (is (enode-canonical-p node)))
    (check-egraph egraph)
    (egraph-merge egraph f-a g-a)
    (egraph-rebuild egraph)
    (is (eq (enode-find f-a) (enode-find g-a)))
    (is (eq (enode-find f-b) (enode-find g-b)))
    (check-egraph egraph)))

(def-test rebuild-cyclic ()
  (let* ((egraph (make-egraph))
         (a (make-enode egraph (list 'a)))
         (f-a (make-enode egraph (list 'f a)))
         (f-f-a (make-enode egraph (list 'f f-a)))
         (f-f-f-a (make-enode egraph (list 'f f-f-a))))
    (egraph-merge egraph a f-a)
    (egraph-rebuild egraph)
    (is (eq (enode-find a) (enode-find f-a)))
    (is (eq (enode-find a) (enode-find f-f-a)))
    (is (eq (enode-find a) (enode-find f-f-f-a)))
    (check-egraph egraph)))

(define-rewrite commute-add (+ ?a ?b) (+ ?b ?a))
(define-rewrite commute-mul (* ?a ?b) (* ?b ?a))
(define-rewrite add-0 (+ ?a 0) ?a)
(define-rewrite mul-0 (* ?a 0) 0)
(define-rewrite mul-1 (* ?a 1) ?a)

(defun run-simple (egraph)
  (let ((n (hash-table-count (egraph::egraph-hash-cons egraph))))
    (loop
      (commute-add egraph)
      (commute-mul egraph)
      (add-0 egraph)
      (mul-0 egraph)
      (mul-1 egraph)
      (egraph-rebuild egraph)
      (check-egraph egraph)
      (let ((n-1 (hash-table-count (egraph::egraph-hash-cons egraph))))
        (if (= n n-1)
            (return)
            (setq n n-1))))))

(def-test simple.1 ()
  (let* ((egraph (make-egraph))
         (a (make-term egraph '(* 0 42)))
         (b (make-term egraph 0)))
    (run-simple egraph)
    (check-egraph egraph)
    (is (eq (enode-find a) (enode-find b)))))

(def-test simple.2 ()
  (let* ((egraph (make-egraph))
         (a (make-term egraph '(+ 0 (* 1 foo))))
         (b (make-term egraph 'foo)))
    (run-simple egraph)
    (check-egraph egraph)
    (is (eq (enode-find a) (enode-find b)))))
