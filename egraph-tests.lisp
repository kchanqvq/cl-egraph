(uiop:define-package :egraph/tests
    (:use :cl :egraph)
  (:import-from :fiveam #:def-suite* #:def-test #:is))

(in-package :egraph/tests)

(def-suite* :egraph)

(def-test union-find ()
  (let* ((egraph (make-egraph))
         (x (make-enode egraph (list 1)))
         (y (make-enode egraph (list 2))))
    (is (eq (enode-find x) x))
    (is (eq (enode-find y) y))
    (egraph-merge egraph x y)
    (is (eq (enode-find x) (enode-find y)))

    (let ((results (list-enodes x)))
      (is (= 2 (length results)))
      (is (member x results))
      (is (member y results)))

    (let ((results (list-enodes y)))
      (is (= 2 (length results)))
      (is (member x results))
      (is (member y results)))

    (egraph-rebuild egraph)
    (is (eq (enode-find x) (enode-find y)))
    (check-egraph egraph)))

(def-test rebuild ()
  (let* ((egraph (make-egraph))
         (a (make-enode egraph (list 'a)))
         (b (make-enode egraph (list 'b)))
         (f-a (make-enode egraph (list 'f a)))
         (f-b (make-enode egraph (list 'f b)))
         (g-a (make-enode egraph (list 'g a)))
         (g-b (make-enode egraph (list 'g b)))
         (f-f-a (make-enode egraph (list 'f f-a)))
         (f-f-b (make-enode egraph (list 'f f-b))))
    (egraph-merge egraph a b)
    (is (eq (enode-find a) (enode-find b)))
    (is (every #'enode-canonical-p (list-enodes a)))
    (egraph-rebuild egraph)
    (is (eq (enode-find f-a) (enode-find f-b)))
    (is (eq (enode-find f-f-a) (enode-find f-f-b)))
    (is (eq (enode-find g-a) (enode-find g-b)))
    (is (not (eq (enode-find a) (enode-find f-a))))
    (is (not (eq (enode-find f-a) (enode-find g-a))))
    (is (not (eq (enode-find f-a) (enode-find f-f-a))))
    (is (every #'enode-canonical-p (list-enodes a)))
    (is (every #'enode-canonical-p (list-enodes f-a)))
    (is (every #'enode-canonical-p (list-enodes g-a)))
    (is (every #'enode-canonical-p (list-enodes f-f-a)))
    (check-egraph egraph)
    (egraph-merge egraph f-a g-a)
    (egraph-rebuild egraph)
    (is (eq (enode-find f-a) (enode-find g-a)))
    (is (eq (enode-find f-b) (enode-find g-b)))
    (check-egraph egraph)))

(def-test rebuild-cyclic ()
  (let* ((egraph (make-egraph))
         (a (make-enode egraph (list 'a)))
         (f-a (make-enode egraph (list 'f a)))
         (f-f-a (make-enode egraph (list 'f f-a)))
         (f-f-f-a (make-enode egraph (list 'f f-f-a))))
    (egraph-merge egraph a f-a)
    (egraph-rebuild egraph)
    (is (eq (enode-find a) (enode-find f-a)))
    (is (eq (enode-find a) (enode-find f-f-a)))
    (is (eq (enode-find a) (enode-find f-f-f-a)))
    (check-egraph egraph)))

(defrw commute-add (+ ?a ?b) (+ ?b ?a))
(defrw commute-mul (* ?a ?b) (* ?b ?a))
(defrw add-0 (+ ?a 0) ?a)
(defrw mul-0 (* ?a 0) 0)
(defrw mul-1 (* ?a 1) ?a)

(defun ast-size (fsym arg-costs)
  (declare (ignore fsym))
  (when (every #'identity arg-costs)
    (1+ (reduce #'+ arg-costs))))

(def-test simple.1 ()
  (let* ((egraph (make-egraph))
         (a (make-term egraph '(* 0 42)))
         (b (make-term egraph 0)))
    (egraph-rebuild egraph)
    (is (eq :saturate
            (run-rewrites egraph '(commute-add commute-mul add-0 mul-0 mul-1)
                          :check t :max-iter 10)))
    (is (eq (enode-find a) (enode-find b)))
    (is (equal 0 (greedy-extract egraph a #'ast-size)))))

(def-test simple.2 ()
  (let* ((egraph (make-egraph))
         (a (make-term egraph '(+ 0 (* 1 foo))))
         (b (make-term egraph 'foo)))
    (egraph-rebuild egraph)
    (is (eq :saturate
            (run-rewrites egraph '(commute-add commute-mul add-0 mul-0 mul-1)
                          :check t :max-iter 10)))
    (is (eq (enode-find a) (enode-find b)))
    (is (equal 'foo (greedy-extract egraph a #'ast-size)))))

(defrw assoc-add (+ ?a (+ ?b ?c)) (+ (+ ?a ?b) ?c))
(defrw assoc-mul (* ?a (* ?b ?c)) (* (* ?a ?b) ?c))

(def-test ac ()
  (let ((egraph (make-egraph)))
    (make-term egraph '(+ 0 (+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (+ 6 7))))))))
    (egraph-rebuild egraph)
    (is (eq :saturate
            (run-rewrites egraph '(commute-add assoc-add)
                          :check t :max-iter 10)))
    (is (= 6058 (hash-table-count (egraph::egraph-hash-cons egraph))))
    (is (= 255 (hash-table-count (egraph::egraph-classes egraph))))))

(defrw sub-cancel (- ?a ?a) 0)
(defrw add-2 (+ ?a ?a) (* 2 ?a))

(def-test nonlinear ()
  (let* ((egraph (make-egraph))
         (a (make-term egraph '(- (+ a b) (+ b a))))
         (b (make-term egraph '(- (+ a a) (* 2 a))))
         (c (make-term egraph '(+ a (- b (* 1 b))))))
    (egraph-rebuild egraph)
    (is (eq :saturate
            (run-rewrites egraph '(sub-cancel add-2
                                   commute-add commute-mul add-0 mul-0 mul-1)
                          :check t :max-iter 10)))
    (is (equal 0 (greedy-extract egraph a #'ast-size)))
    (is (equal 0 (greedy-extract egraph b #'ast-size)))
    (is (equal 'a (greedy-extract egraph c #'ast-size)))))

(defrw d-sin (d ?x (sin ?x)) (cos ?x))
(defrw d-cos (d ?x (cos ?x)) (* -1 (sin ?x)))

(def-test ground ()
  (let* ((egraph (make-egraph))
         (a (make-term egraph '(d a (sin a))))
         (b (make-term egraph '(d (+ a b) (sin (+ b a)))))
         (b-1 (make-term egraph '(cos (+ a b))))
         (c (make-term egraph '(d a (d a (sin a)))))
         (c-1 (make-term egraph '(* -1 (sin a)))))
    (egraph-rebuild egraph)
    (is (eq :saturate
            (run-rewrites egraph '(d-sin d-cos
                                   commute-add commute-mul add-0 mul-0 mul-1)
                          :check t :max-iter 10)))
    (is (equal '(cos a) (greedy-extract egraph a #'ast-size)))
    (is (eq (enode-find b-1) (enode-find b)))
    (is (eq (enode-find c-1) (enode-find c)))))
